diff --git a/src/taskbar.c b/src/taskbar.c
index af8bf8fc..f95ed357 100644
--- a/src/taskbar.c
+++ b/src/taskbar.c
@@ -809,13 +809,13 @@ void Render(const TaskBarType *bp)
    ResetButton(&button, bp->cp->pixmap);
    button.border = settings.taskListDecorations == DECO_MOTIF;
    button.font = FONT_TASKLIST;
-   button.height = bp->itemHeight;
-   button.width = bp->itemWidth;
+   button.height = bp->itemHeight - 2;
+   button.width = bp->itemWidth - 2;
    button.labelPos = bp->labelPos;
    button.text = NULL;
 
-   x = 0;
-   y = 0;
+   x = 1;
+   y = 1;
    for(tp = taskEntries; tp; tp = tp->next) {
 
       if(!ShouldShowEntry(tp)) {
diff -cr jwm-1271/src/traybutton.c jwm-roand/src/traybutton.c
*** jwm-1271/src/traybutton.c	2015-09-12 02:46:52.000000000 +0300
--- jwm-roand/src/traybutton.c	2015-09-18 20:06:44.000000000 +0300
***************
*** 187,193 ****
     bp = (TrayButtonType*)cp->object;
  
     if(bp->label) {
!       labelWidth = GetStringWidth(FONT_TRAY, bp->label);
        labelHeight = GetStringHeight(FONT_TRAY);
     } else {
        labelWidth = 4;
--- 187,193 ----
     bp = (TrayButtonType*)cp->object;
  
     if(bp->label) {
!       labelWidth = GetStringWidth(FONT_TRAY, bp->label) + 3;
        labelHeight = GetStringHeight(FONT_TRAY) + 6;
     } else {
        labelWidth = 4;
***************
*** 267,277 ****
     } else {
        button.type = BUTTON_TRAY;
     }
!    button.width = cp->width;
!    button.height = cp->height;
!    button.border = settings.trayDecorations == DECO_MOTIF;
!    button.x = 0;
!    button.y = 0;
     button.font = FONT_TRAY;
     button.text = bp->label;
     button.icon = bp->icon;
--- 267,280 ----
     } else {
        button.type = BUTTON_TRAY;
     }
!    button.width = cp->width - 2;
!    button.height = cp->height - 2;
!    if (bp->label || button.type == BUTTON_TRAY_ACTIVE)
!       button.border = settings.trayDecorations == DECO_MOTIF;
!    else
!       button.border=0;
!    button.x = 1;
!    button.y = 1;
     button.font = FONT_TRAY;
     button.text = bp->label;
     button.icon = bp->icon;
*** jwm-1271/src/button.h        2015-09-12 02:46:52.000000000 +0300
--- jwm-roand/src/button.h    2015-09-18 21:03:16.000000000 +0300
***************
*** 14,20 ****
  #include "settings.h"
 
  /** Number of pixels used for a border. */
! #define BUTTON_BORDER 3
 
  struct IconNode;
 
--- 14,20 ----
  #include "settings.h"
 
  /** Number of pixels used for a border. */
! #define BUTTON_BORDER 2
 
  struct IconNode;
 
diff --git a/src/button.c b/src/button.c
index e79b3fb4..3ba82c8a 100644
--- a/src/button.c
+++ b/src/button.c
@@ -62,8 +62,8 @@ static void GetButtonColors(ButtonNode *bp, ColorType *fg, long *bg1, long *bg2,
       *fg = COLOR_TASKLIST_FG;
       *bg1 = colors[COLOR_TASKLIST_BG1];
       *bg2 = colors[COLOR_TASKLIST_BG2];
-      *up = colors[COLOR_TASKLIST_UP];
-      *down = colors[COLOR_TASKLIST_DOWN];
+      *up = colors[COLOR_TASKLIST_ACTIVE_UP];
+      *down = colors[COLOR_TASKLIST_ACTIVE_DOWN];
       *decorations = settings.taskListDecorations;
       *gd = gradients[COLOR_TASKLIST_BG1];
       break;
@@ -80,8 +80,8 @@ static void GetButtonColors(ButtonNode *bp, ColorType *fg, long *bg1, long *bg2,
       *fg = COLOR_TASKLIST_MINIMIZED_FG;
       *bg1 = colors[COLOR_TASKLIST_MINIMIZED_BG1];
       *bg2 = colors[COLOR_TASKLIST_MINIMIZED_BG2];
-      *down = colors[COLOR_TASKLIST_MINIMIZED_UP];
-      *up = colors[COLOR_TASKLIST_MINIMIZED_DOWN];
+      *up = colors[COLOR_TASKLIST_ACTIVE_UP];
+      *down = colors[COLOR_TASKLIST_ACTIVE_DOWN];
       *decorations = settings.taskListDecorations;
       *gd = gradients[COLOR_TASKLIST_MINIMIZED_BG1];
       break;
@@ -152,7 +152,7 @@ static void GetTextSpaceRemaining(ButtonNode *bp, int *width, int *height, int *
    if(bp->labelPos < LABEL_POSITION_TOP) {
       if(*width > *height || !bp->icon) {
          const int borderWidth = BUTTON_BORDER * (bp->icon ? 3 : 2);
-         *textWidth = Min(*textWidth, *width - *iconWidth - borderWidth);
+         *textWidth = Min(*textWidth, *width - *iconWidth - borderWidth - 3);
       }
    } else {
       *textHeight = Min(*textHeight, *height - *iconHeight - BUTTON_BORDER * 3);
