diff --git a/jwm.1.in b/jwm.1.in
index 544b5fa7..1723ec81 100644
--- a/jwm.1.in
+++ b/jwm.1.in
@@ -1707,6 +1707,8 @@ Remove the current binding.
 Move to the previous window in the task list.
 .IP \fBprevstacked\fP
 Move to the previous window in the stacking order.
+.IP \fBat#\fP
+Move to window position in the task list.
 .IP \fBclose\fP
 Close the active window.
 .IP \fBminimize\fP
diff --git a/src/action.h b/src/action.h
index df5451ab..ce02359e 100644
--- a/src/action.h
+++ b/src/action.h
@@ -64,6 +64,7 @@ typedef struct {
 #define ACTION_MAXH           41
 #define ACTION_RESTORE        42
 #define ACTION_CENTER         43
+#define ACTION_AT             44
 #define ACTION_INVALID        255
 #define ACTION_RESIZE_N       1  /* Extra value mask for resize north. */
 #define ACTION_RESIZE_S       2  /* Extra value mask for resize south. */
diff --git a/src/binding.c b/src/binding.c
index 187206a8..5b740820 100644
--- a/src/binding.c
+++ b/src/binding.c
@@ -306,6 +306,7 @@ char ShouldGrab(ActionType action)
    case ACTION_MAXH:
    case ACTION_RESTORE:
    case ACTION_CENTER:
+   case ACTION_AT:
       return 1;
    default:
       return 0;
diff --git a/src/event.c b/src/event.c
index bafeb4b8..78e3ec55 100644
--- a/src/event.c
+++ b/src/event.c
@@ -705,6 +705,10 @@ void ProcessBinding(MouseContextType context, ClientNode *np,
          RequirePagerUpdate();
       }
       break;
+    case ACTION_AT:
+      StartWindowWalk();
+      FocusAt(key.extra);
+      break;
    default:
       break;
    }
diff --git a/src/parse.c b/src/parse.c
index 0c70397c..6cb10ad6 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -43,6 +43,7 @@
  * Note that this mapping must be sorted.
  */
 static const StringMappingType ACTION_MAP[] = {
+   { "at#",                   ACTION_AT            },
    { "center",                ACTION_CENTER        },
    { "close",                 ACTION_CLOSE         },
    { "ddesktop",              ACTION_DDESKTOP      },
diff --git a/src/taskbar.c b/src/taskbar.c
index 8de51af0..2ccfbb52 100644
--- a/src/taskbar.c
+++ b/src/taskbar.c
@@ -937,6 +937,23 @@ ClientFound:
    }
 }
 
+/** Focus the client in the task bar. */
+void FocusAt(char n)
+{
+   TaskEntry *tp;
+   char window = 0;
+      
+   for(tp = taskEntries; tp; tp = tp->next) {
+       if(ShouldFocusEntry(tp)) {
+          if(window == n) {
+             FocusGroup(tp);
+             break;
+          }
+          ++window;
+       }
+   }
+}
+
 /** Determine if there is anything to show for the specified entry. */
 char ShouldShowEntry(const TaskEntry *tp)
 {
diff --git a/src/taskbar.h b/src/taskbar.h
index d585846b..7a762f1b 100644
--- a/src/taskbar.h
+++ b/src/taskbar.h
@@ -36,6 +36,11 @@ void RemoveClientFromTaskBar(struct ClientNode *np);
 /** Update all task bars. */
 void UpdateTaskBar(void);
 
+/** Focus the client in the task bar.
+ * @param n The window position in the taskbar.
+ */
+void FocusAt(char n);
+
 /** Focus the next client in the task bar. */
 void FocusNext(void);
 
