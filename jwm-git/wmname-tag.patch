diff --git a/src/group.c b/src/group.c
index aad78ad7..7b60bc08 100644
--- a/src/group.c
+++ b/src/group.c
@@ -22,6 +22,7 @@ typedef unsigned int MatchType;
 #define MATCH_CLASS     1  /**< Match the window class. */
 #define MATCH_TYPE      2  /**< Match the window type. */
 #define MATCH_MACHINE   3  /**< Match the window machine. */
+#define MATCH_WMNAME    4  /**< Match the window name. */
 
 /** List of match patterns for a group. */
 typedef struct PatternListType {
@@ -140,6 +141,17 @@ void AddGroupType(GroupType *gp, const char *pattern)
    }
 }
 
+/** Add a window name to a group. */
+void AddGroupWmName(GroupType *gp, const char *pattern)
+{
+   Assert(gp);
+   if(JLIKELY(pattern)) {
+      AddPattern(&gp->patterns, pattern, MATCH_WMNAME);
+   } else {
+      Warning(_("invalid group name"));
+   }
+}
+
 /** Add a window machine to a group. */
 void AddGroupMachine(GroupType *gp, const char *pattern)
 {
@@ -225,10 +237,12 @@ void ApplyGroups(ClientNode *np)
    char hasName;
    char hasType;
    char hasMachine;
+   char hasWmName;
    char matchesClass;
    char matchesName;
    char matchesType;
    char matchesMachine;
+   char matchesWmName;
 
    static const StringMappingType windowTypeMapping[] = {
       { "desktop",      WINDOW_TYPE_DESKTOP      },
@@ -248,10 +262,12 @@ void ApplyGroups(ClientNode *np)
       hasName = 0;
       hasType = 0;
       hasMachine = 0;
+      hasWmName = 0;
       matchesClass = 0;
       matchesName = 0;
       matchesType = 0;
       matchesMachine = 0;
+      matchesWmName = 0;
       for(lp = gp->patterns; lp; lp = lp->next) {
          if(lp->match == MATCH_CLASS) {
             if(Match(lp->pattern, np->className)) {
@@ -269,6 +285,11 @@ void ApplyGroups(ClientNode *np)
                 matchesType = 1;
              }
              hasType = 1;
+         } else if(lp->match == MATCH_WMNAME) {
+            if(Match(lp->pattern, np->name)) {
+               matchesWmName = 1;
+            }
+            hasWmName = 1;
          } else if(lp->match == MATCH_MACHINE) {
             if(Match(lp->pattern, np->machineName)) {
                matchesMachine = 1;
@@ -279,6 +300,7 @@ void ApplyGroups(ClientNode *np)
          }
       }
       if(hasName == matchesName && hasClass == matchesClass
+      && hasWmName == matchesWmName
       && hasType == matchesType && hasMachine == matchesMachine) {
          ApplyGroup(gp, np);
       }
diff --git a/src/group.h b/src/group.h
index 3bff3c67..d9c28ca8 100644
--- a/src/group.h
+++ b/src/group.h
@@ -88,6 +88,12 @@ void AddGroupName(struct GroupType *gp, const char *pattern);
  */
 void AddGroupType(struct GroupType *gp, const char *pattern);
 
+/** Add a window name to a group.
+ * @param gp The group.
+ * @param pattern A pattern to match with the window name.
+ */
+void AddGroupWmName(struct GroupType *gp, const char *pattern);
+
 /** Add a window machine to a group.
  * @param gp The group.
  * @param pattern A pattern to match with the window type.
diff --git a/src/lex.c b/src/lex.c
index 40fea4bd..6a68e056 100644
--- a/src/lex.c
+++ b/src/lex.c
@@ -92,7 +92,8 @@ static const StringMappingType TOKEN_MAP[] = {
    { "TrayStyle",          TOK_TRAYSTYLE        },
    { "Type",               TOK_TYPE             },
    { "Width",              TOK_WIDTH            },
-   { "WindowStyle",        TOK_WINDOWSTYLE      }
+   { "WindowStyle",        TOK_WINDOWSTYLE      },
+   { "WmName",             TOK_WMNAME           }
 };
 static const unsigned int TOKEN_MAP_COUNT = ARRAY_LENGTH(TOKEN_MAP);
 
diff --git a/src/lex.h b/src/lex.h
index bde2b88e..e2a20d32 100644
--- a/src/lex.h
+++ b/src/lex.h
@@ -88,7 +88,8 @@ typedef enum {
    TOK_TRAYSTYLE,
    TOK_TYPE,
    TOK_WIDTH,
-   TOK_WINDOWSTYLE
+   TOK_WINDOWSTYLE,
+   TOK_WMNAME
 
 } TokenType;
 
diff --git a/src/parse.c b/src/parse.c
index c3062d95..1a97d312 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -1822,6 +1822,9 @@ void ParseGroup(const TokenNode *tp)
       case TOK_TYPE:
          AddGroupType(group, np->value);
          break;
+      case TOK_WMNAME:
+         AddGroupWmName(group, np->value);
+         break;
       case TOK_MACHINE:
          AddGroupMachine(group, np->value);
          break;
