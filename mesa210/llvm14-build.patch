diff --git a/src/amd/llvm/ac_llvm_helper.cpp b/src/amd/llvm/ac_llvm_helper.cpp
index 0ab9517f..d17f74eb 100644
--- a/src/amd/llvm/ac_llvm_helper.cpp
+++ b/src/amd/llvm/ac_llvm_helper.cpp
@@ -66,7 +66,7 @@ bool ac_is_sgpr_param(LLVMValueRef arg)
    llvm::Argument *A = llvm::unwrap<llvm::Argument>(arg);
    llvm::AttributeList AS = A->getParent()->getAttributes();
    unsigned ArgNo = A->getArgNo();
-   return AS.hasAttribute(ArgNo + 1, llvm::Attribute::InReg);
+   return AS.hasAttributeAtIndex(ArgNo + 1, llvm::Attribute::InReg);
 }
 
 LLVMValueRef ac_llvm_get_called_value(LLVMValueRef call)
diff --git a/src/gallium/frontends/clover/llvm/codegen/common.cpp b/src/gallium/frontends/clover/llvm/codegen/common.cpp
index 989d0f3b..813d6e1a 100644
--- a/src/gallium/frontends/clover/llvm/codegen/common.cpp
+++ b/src/gallium/frontends/clover/llvm/codegen/common.cpp
@@ -232,7 +232,7 @@ namespace {
                }
 
             } else {
-               const bool needs_sign_ext = f.getAttributes().hasAttribute(
+               const bool needs_sign_ext = f.getAttributes().hasAttributeAtIndex(
                   arg.getArgNo() + 1, ::llvm::Attribute::SExt);
 
                args.emplace_back(module::argument::scalar, arg_api_size,
diff --git a/src/gallium/frontends/clover/llvm/codegen/native.cpp b/src/gallium/frontends/clover/llvm/codegen/native.cpp
index 683e966e..ce7373ea 100644
--- a/src/gallium/frontends/clover/llvm/codegen/native.cpp
+++ b/src/gallium/frontends/clover/llvm/codegen/native.cpp
@@ -28,7 +28,7 @@
 ///
 
 #include <llvm/Target/TargetMachine.h>
-#include <llvm/Support/TargetRegistry.h>
+#include <llvm/MC/TargetRegistry.h>
 #include <llvm/Transforms/Utils/Cloning.h>
 
 #include "llvm/codegen.hpp"
