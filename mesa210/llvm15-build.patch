diff -cr a/src/gallium/auxiliary/gallivm/lp_bld_arit.c b/src/gallium/auxiliary/gallivm/lp_bld_arit.c
*** a/src/gallium/auxiliary/gallivm/lp_bld_arit.c	2021-04-07 19:36:56.798008700 +0300
--- b/src/gallium/auxiliary/gallivm/lp_bld_arit.c	2023-01-20 21:19:50.432080274 +0300
***************
*** 423,438 ****
           return LLVMBuildNot(builder, a, "");
     }
  
!    if(LLVMIsConstant(a))
!       if (type.floating)
!           return LLVMConstFSub(bld->one, a);
!       else
!           return LLVMConstSub(bld->one, a);
     else
!       if (type.floating)
!          return LLVMBuildFSub(builder, bld->one, a, "");
!       else
!          return LLVMBuildSub(builder, bld->one, a, "");
  }
  
  
--- 423,432 ----
           return LLVMBuildNot(builder, a, "");
     }
  
!    if (type.floating)
!       return LLVMBuildFSub(builder, bld->one, a, "");
     else
!       return LLVMBuildSub(builder, bld->one, a, "");
  }
  
  
***************
*** 511,526 ****
        }
     }
  
!    if(LLVMIsConstant(a) && LLVMIsConstant(b))
!       if (type.floating)
!          res = LLVMConstFAdd(a, b);
!       else
!          res = LLVMConstAdd(a, b);
     else
!       if (type.floating)
!          res = LLVMBuildFAdd(builder, a, b, "");
!       else
!          res = LLVMBuildAdd(builder, a, b, "");
  
     /* clamp to ceiling of 1.0 */
     if(bld->type.norm && (bld->type.floating || bld->type.fixed))
--- 505,514 ----
        }
     }
  
!    if (type.floating)
!       res = LLVMBuildFAdd(builder, a, b, "");
     else
!       res = LLVMBuildAdd(builder, a, b, "");
  
     /* clamp to ceiling of 1.0 */
     if(bld->type.norm && (bld->type.floating || bld->type.fixed))
***************
*** 847,862 ****
        }
     }
  
!    if(LLVMIsConstant(a) && LLVMIsConstant(b))
!       if (type.floating)
!          res = LLVMConstFSub(a, b);
!       else
!          res = LLVMConstSub(a, b);
     else
!       if (type.floating)
!          res = LLVMBuildFSub(builder, a, b, "");
!       else
!          res = LLVMBuildSub(builder, a, b, "");
  
     if(bld->type.norm && (bld->type.floating || bld->type.fixed))
        res = lp_build_max_simple(bld, res, bld->zero, GALLIVM_NAN_BEHAVIOR_UNDEFINED);
--- 835,844 ----
        }
     }
  
!    if (type.floating)
!       res = LLVMBuildFSub(builder, a, b, "");
     else
!       res = LLVMBuildSub(builder, a, b, "");
  
     if(bld->type.norm && (bld->type.floating || bld->type.fixed))
        res = lp_build_max_simple(bld, res, bld->zero, GALLIVM_NAN_BEHAVIOR_UNDEFINED);
***************
*** 1012,1040 ****
     else
        shift = NULL;
  
!    if(LLVMIsConstant(a) && LLVMIsConstant(b)) {
!       if (type.floating)
!          res = LLVMConstFMul(a, b);
!       else
!          res = LLVMConstMul(a, b);
!       if(shift) {
!          if(type.sign)
!             res = LLVMConstAShr(res, shift);
!          else
!             res = LLVMConstLShr(res, shift);
!       }
!    }
!    else {
!       if (type.floating)
!          res = LLVMBuildFMul(builder, a, b, "");
        else
!          res = LLVMBuildMul(builder, a, b, "");
!       if(shift) {
!          if(type.sign)
!             res = LLVMBuildAShr(builder, res, shift, "");
!          else
!             res = LLVMBuildLShr(builder, res, shift, "");
!       }
     }
  
     return res;
--- 994,1009 ----
     else
        shift = NULL;
  
!    if (type.floating)
!       res = LLVMBuildFMul(builder, a, b, "");
!    else
!       res = LLVMBuildMul(builder, a, b, "");
!       
!    if (shift) {
!       if (type.sign)
!          res = LLVMBuildAShr(builder, res, shift, "");
        else
!          res = LLVMBuildLShr(builder, res, shift, "");
     }
  
     return res;
***************
*** 1320,1334 ****
     if(a == bld->undef || b == bld->undef)
        return bld->undef;
  
-    if(LLVMIsConstant(a) && LLVMIsConstant(b)) {
-       if (type.floating)
-          return LLVMConstFDiv(a, b);
-       else if (type.sign)
-          return LLVMConstSDiv(a, b);
-       else
-          return LLVMConstUDiv(a, b);
-    }
- 
     /* fast rcp is disabled (just uses div), so makes no sense to try that */
     if(FALSE &&
        ((util_cpu_caps.has_sse && type.width == 32 && type.length == 4) ||
--- 1289,1294 ----
***************
*** 2649,2655 ****
     assert(type.floating);
  
     if(LLVMIsConstant(a))
!       return LLVMConstFDiv(bld->one, a);
  
     /*
      * We don't use RCPPS because:
--- 2609,2615 ----
     assert(type.floating);
  
     if(LLVMIsConstant(a))
!       return LLVMBuildFDiv(builder, bld->one, a, "");
  
     /*
      * We don't use RCPPS because:
diff -cr a/src/gallium/auxiliary/gallivm/lp_bld.h b/src/gallium/auxiliary/gallivm/lp_bld.h
*** a/src/gallium/auxiliary/gallivm/lp_bld.h	2021-04-07 19:36:56.798008700 +0300
--- b/src/gallium/auxiliary/gallivm/lp_bld.h	2023-01-20 21:41:40.733181149 +0300
***************
*** 81,90 ****
  #define LLVMInsertBasicBlock ILLEGAL_LLVM_FUNCTION
  #define LLVMCreateBuilder ILLEGAL_LLVM_FUNCTION
  
- #if LLVM_VERSION_MAJOR >= 8
- #define GALLIVM_HAVE_CORO 1
- #else
  #define GALLIVM_HAVE_CORO 0
- #endif
  
  #endif /* LP_BLD_H */
--- 81,86 ----
Только в b/src/gallium/auxiliary/util: __pycache__
diff -cr a/src/gallium/frontends/clover/llvm/codegen/common.cpp b/src/gallium/frontends/clover/llvm/codegen/common.cpp
*** a/src/gallium/frontends/clover/llvm/codegen/common.cpp	2023-01-20 22:08:04.517823549 +0300
--- b/src/gallium/frontends/clover/llvm/codegen/common.cpp	2023-01-20 21:57:12.501401454 +0300
***************
*** 31,36 ****
--- 31,37 ----
  ///
  
  #include <llvm/Support/Allocator.h>
+ #include <llvm/IR/DerivedTypes.h>
  
  #include "llvm/codegen.hpp"
  #include "llvm/metadata.hpp"
***************
*** 205,211 ****
              // Other types.
              const auto actual_type =
                 isa< ::llvm::PointerType>(arg_type) && arg.hasByValAttr() ?
!                cast< ::llvm::PointerType>(arg_type)->getElementType() : arg_type;
  
              if (actual_type->isPointerTy()) {
                 const unsigned address_space =
--- 206,212 ----
              // Other types.
              const auto actual_type =
                 isa< ::llvm::PointerType>(arg_type) && arg.hasByValAttr() ?
!                cast< ::llvm::PointerType>(arg_type)->getPointerElementType() : arg_type;
  
              if (actual_type->isPointerTy()) {
                 const unsigned address_space =
diff -cr a/src/gallium/frontends/clover/llvm/invocation.cpp b/src/gallium/frontends/clover/llvm/invocation.cpp
*** a/src/gallium/frontends/clover/llvm/invocation.cpp	2023-01-20 22:08:04.517823549 +0300
--- b/src/gallium/frontends/clover/llvm/invocation.cpp	2023-01-20 22:04:18.069066175 +0300
***************
*** 247,254 ****
        // http://www.llvm.org/bugs/show_bug.cgi?id=19735
        c->getDiagnosticOpts().ShowCarets = false;
  
!       c->getInvocation().setLangDefaults(c->getLangOpts(),
!                                 compat::ik_opencl, ::llvm::Triple(target.triple),
  #if LLVM_VERSION_MAJOR >= 12
                                  c->getPreprocessorOpts().Includes,
  #else
--- 247,255 ----
        // http://www.llvm.org/bugs/show_bug.cgi?id=19735
        c->getDiagnosticOpts().ShowCarets = false;
  
!       c->getLangOpts().setLangDefaults(c->getLangOpts(), compat::ik_opencl.getLanguage(), ::llvm::Triple(target.triple),
! //      c->getInvocation().setLangDefaults(c->getLangOpts(),
! //                                compat::ik_opencl, ::llvm::Triple(target.triple),
  #if LLVM_VERSION_MAJOR >= 12
                                  c->getPreprocessorOpts().Includes,
  #else
diff -cr a/src/gallium/frontends/clover/llvm/metadata.hpp b/src/gallium/frontends/clover/llvm/metadata.hpp
*** a/src/gallium/frontends/clover/llvm/metadata.hpp	2023-01-20 22:08:04.521156864 +0300
--- b/src/gallium/frontends/clover/llvm/metadata.hpp	2023-01-20 21:52:06.716412766 +0300
***************
*** 35,40 ****
--- 35,41 ----
  #include <llvm/Config/llvm-config.h>
  #include <llvm/IR/Module.h>
  #include <llvm/IR/Metadata.h>
+ #include <llvm/IR/Constants.h>
  
  namespace clover {
     namespace llvm {
