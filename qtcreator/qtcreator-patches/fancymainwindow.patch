diff --git a/src/libs/utils/fancymainwindow.cpp b/src/libs/utils/fancymainwindow.cpp
index 4f282659..d824a459 100644
--- a/src/libs/utils/fancymainwindow.cpp
+++ b/src/libs/utils/fancymainwindow.cpp
@@ -110,6 +110,12 @@ public:
 
     QVariant saveState() const;
     void restoreState(const QVariant &data);
+    
+    bool eventFilter(QObject *, QEvent *event) override;
+    void enterEvent(QEnterEvent *event) override;
+    void leaveEvent(QEvent *event) override;
+    void handleMouseTimeout();
+    void handleToplevelChanged(bool floating);
 
     FancyMainWindow *q;
 
@@ -124,6 +130,9 @@ private:
     QWidget *m_hiddenInnerWidget = nullptr;
     int m_hiddenInnerWidgetHeight = 0;
     TitleBarWidget *m_titleBar;
+    QTimer m_timer;
+    QPoint m_startPos;
+
 };
 
 // Stolen from QDockWidgetTitleButton
@@ -190,30 +199,19 @@ void DockWidgetTitleButton::paintEvent(QPaintEvent *)
     style()->drawComplexControl(QStyle::CC_ToolButton, &opt, &p, this);
 }
 
-class TitleBarWidget : public StyledBar
+class TitleBarWidget : public QWidget
 {
 public:
-    TitleBarWidget(DockWidget *parent)
-        : StyledBar(parent)
-        , q(parent)
+    TitleBarWidget(DockWidget *parent, const QStyleOptionDockWidget &opt)
+      : QWidget(parent), q(parent), m_active(true)
     {
         m_titleLabel = new QLabel(this);
 
-        m_collapseButton = new DockWidgetTitleButton(this);
-        updateCollapse();
-        connect(m_collapseButton,
-                &DockWidgetTitleButton::clicked,
-                this,
-                &TitleBarWidget::toggleCollapse);
-        connect(q->q, &FancyMainWindow::dockWidgetsChanged, this, &TitleBarWidget::updateCollapse);
-        connect(q, &DockWidget::collapseChanged, this, &TitleBarWidget::updateCollapse);
-
         m_floatButton = new DockWidgetTitleButton(this);
-        m_floatButton->setIcon(
-            Icon({{":/utils/images/app-on-top.png", Theme::IconsBaseColor}}).icon());
+        m_floatButton->setIcon(q->style()->standardIcon(QStyle::SP_TitleBarNormalButton, &opt, q));
 
         m_closeButton = new DockWidgetTitleButton(this);
-        m_closeButton->setIcon(Icons::CLOSE_TOOLBAR.icon());
+        m_closeButton->setIcon(q->style()->standardIcon(QStyle::SP_TitleBarCloseButton, &opt, q));
 
 #ifndef QT_NO_ACCESSIBILITY
         m_floatButton->setAccessibleName(QDockWidget::tr("Float"));
@@ -222,33 +220,39 @@ public:
         m_closeButton->setAccessibleDescription(QDockWidget::tr("Closes the dock widget"));
 #endif
 
+        setActive(false);
+
+        const int minWidth = 10;
+        const int maxWidth = 10000;
+        const int inactiveHeight = 0;
+        const int activeHeight = m_closeButton->sizeHint().height() + 2;
+
+        m_minimumInactiveSize = QSize(minWidth, inactiveHeight);
+        m_maximumInactiveSize = QSize(maxWidth, inactiveHeight);
+        m_minimumActiveSize   = QSize(minWidth, activeHeight);
+        m_maximumActiveSize   = QSize(maxWidth, activeHeight);
+
         auto layout = new QHBoxLayout(this);
         layout->setSpacing(0);
         layout->setContentsMargins(4, 0, 0, 0);
-        layout->addWidget(m_collapseButton);
         layout->addWidget(m_titleLabel);
         layout->addStretch();
         layout->addWidget(m_floatButton);
         layout->addWidget(m_closeButton);
         setLayout(layout);
 
-        m_closeButton->setVisible(false);
-        m_floatButton->setVisible(false);
-        connect(parent, &QDockWidget::featuresChanged, this, [this] { updateChildren(); });
+        setProperty("managed_titlebar", 1);
+
+        connect(parent, &QDockWidget::featuresChanged, this, [this, parent] {
+            m_closeButton->setVisible(parent->features().testFlag(QDockWidget::DockWidgetClosable));
+            m_floatButton->setVisible(parent->features().testFlag(QDockWidget::DockWidgetFloatable));
+        });
     }
 
     void enterEvent(QEnterEvent *event) override
     {
-        m_hovered = true;
+        setActive(true);
         QWidget::enterEvent(event);
-        updateChildren();
-    }
-
-    void leaveEvent(QEvent *event) override
-    {
-        m_hovered = false;
-        QWidget::leaveEvent(event);
-        updateChildren();
     }
 
     void setActive(bool on)
@@ -259,52 +263,47 @@ public:
 
     void updateChildren()
     {
-        setVisible(m_active);
-        m_floatButton->setVisible(m_hovered
+        bool clickable = isClickable();
+        m_titleLabel->setVisible(clickable);
+
+        m_floatButton->setVisible(clickable
                                   && q->features().testFlag(QDockWidget::DockWidgetFloatable));
-        m_closeButton->setVisible(m_hovered
+        m_closeButton->setVisible(clickable
                                   && q->features().testFlag(QDockWidget::DockWidgetClosable));
-        updateCollapse();
     }
 
-    QSize sizeHint() const override
+    bool isClickable() const
     {
-        ensurePolished();
-        return m_active ? QSize(titleMaxWidth, StyledBar::minimumHeight())
-                        : QSize(titleMaxWidth, titleInactiveHeight);
+        return m_active;
     }
 
-    QSize minimumSizeHint() const override
+    QSize sizeHint() const override
     {
         ensurePolished();
-        return m_active ? QSize(titleMinWidth, StyledBar::minimumHeight())
-                        : QSize(titleMinWidth, titleInactiveHeight);
+        return isClickable() ? m_maximumActiveSize : m_maximumInactiveSize;
     }
 
-    void toggleCollapse() { q->setCollapsed(!q->isCollapsed()); }
-
-    void updateCollapse()
+    QSize minimumSizeHint() const override
     {
-        const bool supported = q->supportsCollapse();
-        m_collapseButton->setVisible(supported);
-        if (q->isCollapsed())
-            m_collapseButton->setIcon(Icons::NEXT_TOOLBAR.icon());
-        else
-            m_collapseButton->setIcon(Icons::ARROW_DOWN_TOOLBAR.icon());
+        ensurePolished();
+        return isClickable() ? m_minimumActiveSize : m_minimumInactiveSize;
     }
 
 private:
     DockWidget *q;
-    bool m_active = true;
-    bool m_hovered = false;
+    bool m_active;
+    QSize m_minimumActiveSize;
+    QSize m_maximumActiveSize;
+    QSize m_minimumInactiveSize;
+    QSize m_maximumInactiveSize;
 
 public:
     QLabel *m_titleLabel;
-    DockWidgetTitleButton *m_collapseButton;
     DockWidgetTitleButton *m_floatButton;
     DockWidgetTitleButton *m_closeButton;
 };
 
+
 DockWidget::DockWidget(QWidget *inner, FancyMainWindow *parent, bool immutable)
     : QDockWidget(parent)
     , q(parent)
@@ -321,7 +320,7 @@ DockWidget::DockWidget(QWidget *inner, FancyMainWindow *parent, bool immutable)
 
     QStyleOptionDockWidget opt;
     initStyleOption(&opt);
-    m_titleBar = new TitleBarWidget(this);
+    m_titleBar = new TitleBarWidget(this, opt);
     m_titleBar->m_titleLabel->setText(title);
     setTitleBarWidget(m_titleBar);
 
@@ -330,6 +329,13 @@ DockWidget::DockWidget(QWidget *inner, FancyMainWindow *parent, bool immutable)
         return;
     }
 
+    m_timer.setSingleShot(true);
+    m_timer.setInterval(500);
+
+    connect(&m_timer, &QTimer::timeout, this, &DockWidget::handleMouseTimeout);
+    connect(this, &QDockWidget::topLevelChanged, this, &DockWidget::handleToplevelChanged);
+
+    m_titleBar->setActive(false);
     connect(toggleViewAction(), &QAction::triggered, this, [this] {
         if (isVisible())
             raise();
@@ -451,6 +457,49 @@ void DockWidget::setCollapsed(bool collapse)
     emit collapseChanged();
 }
 
+bool DockWidget::eventFilter(QObject *, QEvent *event)
+{
+    if (event->type() == QEvent::MouseMove) {
+        auto me = static_cast<QMouseEvent *>(event);
+        int y = me->pos().y();
+        int x = me->pos().x();
+        int h = qMin(8, m_titleBar->m_floatButton->height());
+        if (!isFloating() && widget() && 0 <= x && x < widget()->width() && 0 <= y && y <= h) {
+            m_timer.start();
+            m_startPos = mapToGlobal(me->pos());
+        }
+    }
+    return false;
+}
+
+void DockWidget::enterEvent(QEnterEvent *event)
+{
+    QApplication::instance()->installEventFilter(this);
+    QDockWidget::enterEvent(event);
+}
+
+void DockWidget::leaveEvent(QEvent *event)
+{
+    if (!isFloating()) {
+        m_timer.stop();
+        m_titleBar->setActive(false);
+    }
+    QApplication::instance()->removeEventFilter(this);
+    QDockWidget::leaveEvent(event);
+}
+
+void DockWidget::handleMouseTimeout()
+{
+    QPoint dist = m_startPos - QCursor::pos();
+    if (!isFloating() && dist.manhattanLength() < 4)
+        m_titleBar->setActive(true);
+}
+
+void DockWidget::handleToplevelChanged(bool floating)
+{
+    m_titleBar->setActive(floating);
+}
+
 const char kDockWidgetInnerWidgetHeight[] = "InnerWidgetHeight";
 
 QVariant DockWidget::saveState() const
