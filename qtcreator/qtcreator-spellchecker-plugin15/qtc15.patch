diff --git a/SpellChecker.json.in b/SpellChecker.json.in
index c71badad..b4b5a68c 100644
--- a/SpellChecker.json.in
+++ b/SpellChecker.json.in
@@ -1,7 +1,9 @@
 {
+    "Id" : "spellchecker",
     "Name" : "SpellChecker",
     "Version" : "3.7.0",
     "CompatVersion" : "3.7.0",
+    "VendorId" : "carel_combrink",
     "Vendor" : "Carel Combrink",
     "Copyright" : "(C) 2015 - 2024 Carel Combrink",
     "License" : [ "GNU Lesser General Public License Usage",
diff --git a/src/spellcheckerconstants.h b/src/spellcheckerconstants.h
index a83869d9..cf89e4e2 100644
--- a/src/spellcheckerconstants.h
+++ b/src/spellcheckerconstants.h
@@ -19,6 +19,9 @@
 ****************************************************************************/
 
 #pragma once
+
+#include <utils/id.h>
+
 #include <QtGlobal>
 
 namespace SpellChecker {
@@ -26,17 +29,17 @@ namespace Constants {
 
 const char SPELLCHECK_MISTAKE_ID[] = "SpellChecker.Spelling.Mistake";
 
-const char MENU_ID[]           = "SpellChecker.Menu";
-const char CONTEXT_MENU_ID[]   = "SpellChecker.ContextMenu";
-const char ACTION_SUGGEST_ID[] = "SpellChecker.ActionSuggest";
-const char ACTION_IGNORE_ID[]  = "SpellChecker.ActionIgnore";
-const char ACTION_ADD_ID[]     = "SpellChecker.ActionAdd";
-const char ACTION_LUCKY_ID[]   = "SpellChecker.ActionLucky";
-const char ACTION_HOLDER1_ID[] = "SpellChecker.ActionHolder1";
-const char ACTION_HOLDER2_ID[] = "SpellChecker.ActionHolder2";
-const char ACTION_HOLDER3_ID[] = "SpellChecker.ActionHolder3";
-const char ACTION_HOLDER4_ID[] = "SpellChecker.ActionHolder4";
-const char ACTION_HOLDER5_ID[] = "SpellChecker.ActionHolder5";
+const Utils::Id MENU_ID           { "SpellChecker.Menu"};
+const Utils::Id CONTEXT_MENU_ID   { "SpellChecker.ContextMenu"};
+const Utils::Id ACTION_SUGGEST_ID { "SpellChecker.ActionSuggest"};
+const Utils::Id ACTION_IGNORE_ID  { "SpellChecker.ActionIgnore"};
+const Utils::Id ACTION_ADD_ID     { "SpellChecker.ActionAdd"};
+const Utils::Id ACTION_LUCKY_ID   { "SpellChecker.ActionLucky"};
+const Utils::Id ACTION_HOLDER1_ID { "SpellChecker.ActionHolder1"};
+const Utils::Id ACTION_HOLDER2_ID { "SpellChecker.ActionHolder2"};
+const Utils::Id ACTION_HOLDER3_ID { "SpellChecker.ActionHolder3"};
+const Utils::Id ACTION_HOLDER4_ID { "SpellChecker.ActionHolder4"};
+const Utils::Id ACTION_HOLDER5_ID { "SpellChecker.ActionHolder5"};
 
 const char CORE_SETTINGS_GROUP[]      = "SpellCheckerPlugin";
 const char CORE_SPELLCHECKERS_GROUP[] = "SpellCheckers";
diff --git a/src/spellcheckercore.cpp b/src/spellcheckercore.cpp
index c5d026b6..5cfdd741 100644
--- a/src/spellcheckercore.cpp
+++ b/src/spellcheckercore.cpp
@@ -815,7 +815,7 @@ void SpellCheckerCore::updateContextMenu()
   if( d->contextMenuHolderCommands.isEmpty() == true ) {
     /* Populate the internal vector with the holder actions to speed up the process
      * of updating the context menu when requested again. */
-    QVector<const char*> holderActionIds { Constants::ACTION_HOLDER1_ID, Constants::ACTION_HOLDER2_ID, Constants::ACTION_HOLDER3_ID, Constants::ACTION_HOLDER4_ID, Constants::ACTION_HOLDER5_ID };
+    QVector<Utils::Id> holderActionIds { Constants::ACTION_HOLDER1_ID, Constants::ACTION_HOLDER2_ID, Constants::ACTION_HOLDER3_ID, Constants::ACTION_HOLDER4_ID, Constants::ACTION_HOLDER5_ID };
     /* Iterate the commands and */
     for( int count = 0; count < holderActionIds.size(); ++count ) {
       Core::Command* cmd = Core::ActionManager::command( holderActionIds[count] );
diff --git a/src/spellcheckerplugin.cpp b/src/spellcheckerplugin.cpp
index 58a7d81f..7767a8d1 100644
--- a/src/spellcheckerplugin.cpp
+++ b/src/spellcheckerplugin.cpp
@@ -163,7 +163,7 @@ bool SpellCheckerPlugin::initialize( const QStringList& arguments, QString* erro
   contextMenu->addSeparator();
   /* Add 5 dummy actions that will be used for spelling mistakes that can be fixed from the
    * context menu */
-  QVector<const char*> holderActionIds { Constants::ACTION_HOLDER1_ID, Constants::ACTION_HOLDER2_ID, Constants::ACTION_HOLDER3_ID, Constants::ACTION_HOLDER4_ID, Constants::ACTION_HOLDER5_ID };
+  QVector<Utils::Id> holderActionIds { Constants::ACTION_HOLDER1_ID, Constants::ACTION_HOLDER2_ID, Constants::ACTION_HOLDER3_ID, Constants::ACTION_HOLDER4_ID, Constants::ACTION_HOLDER5_ID };
   for( int count = 0; count < holderActionIds.size(); ++count ) {
     QAction* actionHolder    = new QAction( QStringLiteral( "" ), this );
     Core::Command* cmdHolder = Core::ActionManager::registerAction( actionHolder, holderActionIds[count], textContext );
