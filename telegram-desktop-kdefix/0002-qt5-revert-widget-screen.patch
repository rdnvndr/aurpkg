commit 6aaad1c32386ea50fb13aceae3721b705585a071
Author: Dmitry Valter <dvalter@protonmail.com>
Date:   Mon Apr 25 15:57:54 2022 +0000

    Revert "Use QWidget::screen/QWidget::mask instead of QWindow ones"
    
    This reverts commit e5d8a1aa3c9457c0c0ceb560190a19d7b5349d9d.

diff --git a/Telegram/SourceFiles/calls/group/ui/desktop_capture_choose_source.cpp b/Telegram/SourceFiles/calls/group/ui/desktop_capture_choose_source.cpp
index c19b352c4..e0be8b20b 100644
--- a/Telegram/SourceFiles/calls/group/ui/desktop_capture_choose_source.cpp
+++ b/Telegram/SourceFiles/calls/group/ui/desktop_capture_choose_source.cpp
@@ -574,18 +574,21 @@ void ChooseSourceProcess::setupSourcesGeometry() {
 
 void ChooseSourceProcess::setupGeometryWithParent(
 		not_null<QWidget*> parent) {
-	const auto parentScreen = [&] {
-		if (!::Platform::IsWayland()) {
-			if (const auto screen = QGuiApplication::screenAt(
-				parent->geometry().center())) {
-				return screen;
+	if (const auto handle = parent->windowHandle()) {
+		_window->createWinId();
+		const auto parentScreen = [&] {
+			if (!::Platform::IsWayland()) {
+				if (const auto screen = QGuiApplication::screenAt(
+					parent->geometry().center())) {
+					return screen;
+				}
 			}
+			return handle->screen();
+		}();
+		const auto myScreen = _window->windowHandle()->screen();
+		if (parentScreen && myScreen != parentScreen) {
+			_window->windowHandle()->setScreen(parentScreen);
 		}
-		return parent->screen();
-	}();
-	const auto myScreen = _window->screen();
-	if (parentScreen && myScreen != parentScreen) {
-		_window->setScreen(parentScreen);
 	}
 	_window->move(
 		parent->x() + (parent->width() - _window->width()) / 2,
diff --git a/Telegram/SourceFiles/media/view/media_view_overlay_widget.cpp b/Telegram/SourceFiles/media/view/media_view_overlay_widget.cpp
index f25cecbcd..1000089ec 100644
--- a/Telegram/SourceFiles/media/view/media_view_overlay_widget.cpp
+++ b/Telegram/SourceFiles/media/view/media_view_overlay_widget.cpp
@@ -346,7 +346,7 @@ OverlayWidget::OverlayWidget()
 				.arg(geometry.y())
 				.arg(geometry.width())
 				.arg(geometry.height())
-				.arg(screenList.indexOf(_widget->screen())));
+				.arg(screenList.indexOf(window()->screen())));
 			moveToScreen();
 		} else {
 			clearAfterHide();
@@ -487,7 +487,10 @@ void OverlayWidget::moveToScreen(bool inMove) {
 				return screen;
 			}
 		}
-		return widget->screen();
+		if (const auto handle = widget->windowHandle()) {
+			return handle->screen();
+		}
+		return nullptr;
 	};
 	const auto applicationWindow = Core::App().activeWindow()
 		? Core::App().activeWindow()->widget().get()
@@ -499,9 +502,9 @@ void OverlayWidget::moveToScreen(bool inMove) {
 		DEBUG_LOG(("Viewer Pos: Currently on screen %1, moving to screen %2")
 			.arg(screenList.indexOf(myScreen))
 			.arg(screenList.indexOf(activeWindowScreen)));
-		_widget->setScreen(activeWindowScreen);
+		window()->setScreen(activeWindowScreen);
 		DEBUG_LOG(("Viewer Pos: New actual screen: %1")
-			.arg(screenList.indexOf(_widget->screen())));
+			.arg(screenList.indexOf(window()->screen())));
 	}
 	updateGeometry(inMove);
 }
@@ -510,7 +513,10 @@ void OverlayWidget::updateGeometry(bool inMove) {
 	if (Platform::IsWayland()) {
 		return;
 	}
-	const auto available = _widget->screen()->geometry();
+	const auto screen = window()->screen()
+		? window()->screen()
+		: QApplication::primaryScreen();
+	const auto available = screen->geometry();
 	const auto openglWidget = _opengl
 		? static_cast<QOpenGLWidget*>(_widget.get())
 		: nullptr;
@@ -528,7 +534,7 @@ void OverlayWidget::updateGeometry(bool inMove) {
 		return;
 	}
 	if ((_widget->geometry() == use)
-		&& (!possibleSizeHack || _widget->mask() == mask)) {
+		&& (!useSizeHack || window()->mask() == mask)) {
 		return;
 	}
 	DEBUG_LOG(("Viewer Pos: Setting %1, %2, %3, %4")
@@ -537,10 +543,8 @@ void OverlayWidget::updateGeometry(bool inMove) {
 		.arg(use.width())
 		.arg(use.height()));
 	_widget->setGeometry(use);
-	_widget->setMinimumSize(use.size());
-	_widget->setMaximumSize(use.size());
-	if (possibleSizeHack) {
-		_widget->setMask(mask);
+	if (useSizeHack) {
+		window()->setMask(mask);
 	}
 }
 
@@ -1554,7 +1558,7 @@ void OverlayWidget::handleScreenChanged(QScreen *screen) {
 
 void OverlayWidget::subscribeToScreenGeometry() {
 	_screenGeometryLifetime.destroy();
-	const auto screen = _widget->screen();
+	const auto screen = window()->screen();
 	if (!screen) {
 		return;
 	}
diff --git a/Telegram/SourceFiles/media/view/media_view_pip.cpp b/Telegram/SourceFiles/media/view/media_view_pip.cpp
index 2c0bf14c4..eb0ea46f5 100644
--- a/Telegram/SourceFiles/media/view/media_view_pip.cpp
+++ b/Telegram/SourceFiles/media/view/media_view_pip.cpp
@@ -418,7 +418,10 @@ rpl::producer<> PipPanel::saveGeometryRequests() const {
 }
 
 QScreen *PipPanel::myScreen() const {
-	return widget()->screen();
+	if (const auto window = widget()->windowHandle()) {
+		return window->screen();
+	}
+	return nullptr;
 }
 
 PipPanel::Position PipPanel::countPosition() const {
@@ -470,12 +473,15 @@ void PipPanel::setPositionDefault() {
 				return screen;
 			}
 		}
-		return widget->screen();
+		if (const auto handle = widget->windowHandle()) {
+			return handle->screen();
+		}
+		return nullptr;
 	};
 	const auto parentScreen = widgetScreen(_parent);
 	const auto myScreen = widgetScreen(widget());
 	if (parentScreen && myScreen && myScreen != parentScreen) {
-		widget()->setScreen(parentScreen);
+		widget()->windowHandle()->setScreen(parentScreen);
 	}
 	auto position = Position();
 	position.snapped = RectPart::Top | RectPart::Left;
diff --git a/Telegram/SourceFiles/platform/win/main_window_win.cpp b/Telegram/SourceFiles/platform/win/main_window_win.cpp
index 380041398..68d2da2e4 100644
--- a/Telegram/SourceFiles/platform/win/main_window_win.cpp
+++ b/Telegram/SourceFiles/platform/win/main_window_win.cpp
@@ -399,10 +399,16 @@ bool MainWindow::initGeometryFromSystem() {
 	if (!hasTabletView()) {
 		return false;
 	}
-	if (!screen()) {
+	const auto screen = [&] {
+		if (const auto result = windowHandle()->screen()) {
+			return result;
+		}
+		return QGuiApplication::primaryScreen();
+	}();
+	if (!screen) {
 		return false;
 	}
-	Ui::RpWidget::setGeometry(screen()->availableGeometry());
+	Ui::RpWidget::setGeometry(screen->availableGeometry());
 	return true;
 }
 
diff --git a/Telegram/SourceFiles/ui/widgets/separate_panel.cpp b/Telegram/SourceFiles/ui/widgets/separate_panel.cpp
index d342324e4..84a708906 100644
--- a/Telegram/SourceFiles/ui/widgets/separate_panel.cpp
+++ b/Telegram/SourceFiles/ui/widgets/separate_panel.cpp
@@ -364,7 +364,7 @@ void SeparatePanel::initGeometry(QSize size) {
 	const auto active = QApplication::activeWindow();
 	const auto available = !active
 		? QGuiApplication::primaryScreen()->availableGeometry()
-		: active->screen()->availableGeometry();
+		: active->windowHandle()->screen()->availableGeometry();
 	const auto parentGeometry = (active
 		&& active->isVisible()
 		&& active->isActiveWindow())
diff --git a/Telegram/SourceFiles/window/window_controller.cpp b/Telegram/SourceFiles/window/window_controller.cpp
index b4c42271d..23079805d 100644
--- a/Telegram/SourceFiles/window/window_controller.cpp
+++ b/Telegram/SourceFiles/window/window_controller.cpp
@@ -386,9 +386,11 @@ void Controller::invokeForSessionController(
 }
 
 QPoint Controller::getPointForCallPanelCenter() const {
+	Expects(_widget.windowHandle() != nullptr);
+
 	return _widget.isActive()
 		? _widget.geometry().center()
-		: _widget.screen()->geometry().center();
+		: _widget.windowHandle()->screen()->geometry().center();
 }
 
 void Controller::showLogoutConfirmation() {
